
===========================
Accessing external datasets
===========================

Any bioinformatics project needs to access data from various sources. While ``pygr.Data`` helps us
in providing a common namespace, it does not solve the problem of properly populating this 
namespace with data in the right format. The ``contrib.fetch`` module is meant to assist in
this process.

Retrieve data with the fetch module
-----------------------------------

The purpose of the ``contrib.fetch`` module is to allow straigthforward access to bioinformatics resources.
A typical usage is as follows:

.. testsetup:: [*]
    
    >>> import os, pathfix, testutil
    >>> tempdir  = testutil.TempDir( 'pygrdata' )
    >>> testutil.change_pygrdatapath( tempdir.path )


>>> import pygr.Data
>>> from pygr.contrib import fetch
>>>
>>> genome = fetch.get( 'UCSC.sacCer1.chromFa' )
>>>
>>> genome.keys()[:3]
['chr1', 'chr10', 'chr11']
>>>
>>> type( genome)
<class 'pygr.seqdb.SequenceFileDB'>
>>>
>>> # data is now present in pygr.Data as well
>>> genome2 = pygr.Data.UCSC.sacCer1.chromFa()
>>> genome2.keys()[:3]
['chr1', 'chr10', 'chr11']

In the code snippet above the ``fetch.get`` function has peformed several actions:

* it has first downloaded the yeast genome from UCSC 
  from the http://hgdownload.cse.ucsc.edu/goldenPath/sacCer1/bigZips/chromFa.zip url. 

* as this file contains several FASTA files (each corresponding to a chromosome) it 
  has concatenated them into a single FASTA file

* it has wrapped the resulting FASTA into a SequenceFileDB instance

* it has deposited the resulting dataset into ``pygr.Data`` under the same name 
  it has been accessed with

* if the resource is already present in ``pygr.Data`` no action is taken unless the 
  ``update=True`` parameter is passed to the ``get`` function.

Listing known datasets
----------------------

We may search for available datasets with::

    for source in fetch.search( "yeast sequence"):
        print source

or by visually inspecting the resource listing format (see below).

Resource specification
----------------------

Resources are specified in a file written in a text format called YAML. Here is an example:: 

    - name: UCSC.sacCer1.chromFa 
      format: fasta
      url: http://hgdownload.cse.ucsc.edu/goldenPath/sacCer1/bigZips/chromFa.zip
      doc: The working draft sequence for Saccharomyces cerevisiae (yeast) 
            in one file per chromosome. No masking of repetitive sequences.

    - name: UCSC.sacCer1.estFa 
      format: fasta
      url: http://hgdownload.cse.ucsc.edu/goldenPath/sacCer1/bigZips/est.fa.gz
      doc: Saccharomyces cerevisiae (yeast) EST sequences deposited into GenBank

There is a default resource file in the ``contrib/data`` folder parsed upon importing the module.
Users may also create their own resource files::

    # assume that the file myresources.txt contains resources in YAML format
    # and that it contains an entry named Bio.Genome.EColi
    sources = fetch.parse_sourcefile( 'myresources.txt' )
    data = fetch.get( 'Bio.Genome.EColi', sources=sources )

Format specification
--------------------

Todo (more details)

Fetch module API
----------------

Autogenerated documentation for the fetch module

.. automodule:: pygr.contrib.fetch
    :members:
    :undoc-members:

